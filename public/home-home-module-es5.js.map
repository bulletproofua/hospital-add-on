{"version":3,"sources":["webpack:///src/app/home/components/filter/list.component.ts","webpack:///src/app/home/components/group-filter/group-filter.component.ts","webpack:///src/app/home/components/list/list.component.ts","webpack:///src/app/home/components/list/list.component.html","webpack:///src/app/home/container/home-container/home-container.component.ts","webpack:///src/app/home/container/home-container/home-container.component.html","webpack:///src/app/home/home-routing.module.ts","webpack:///src/app/home/home.module.ts","webpack:///src/app/home/store/actions/home.action.ts","webpack:///src/app/home/store/effects/home.effects.ts","webpack:///src/app/home/store/reducers/home.reducer.ts","webpack:///src/app/home/store/reducers/index.ts"],"names":["FilterComponent","store","text","dispatch","applyFilter","selector","template","styles","GroupFilterComponent","selectedGroups$","select","event","group","ListComponent","clipboard","_snackBar","tableData$","displayedColumns","index","item","isGroup","isSubgroup","copy","openSnackBar","message","openFromComponent","CopySnackBarComponent","duration","data","templateUrl","styleUrls","snackBar","dismiss","onClick","HomeContainerComponent","data$","error$","routes","path","component","HomeRoutingModule","forChild","imports","exports","COMPONENTS","HomeModule","forFeature","declarations","getData","getDataSuccess","getDataFailure","toggleGroup","setTextFilter","HomeEffects","actions$","dataService","getData$","pipe","getDataFromFile","storeData","groups","error","HOME_FEATURE_KEY","initialState","filter","selectedGroups","dataReducer","state","type","map","g","id","title","selected","undefined","SG","JSON","parse","stringify","el","findIndex","reducer","action","getGroups","getError","getFilter","getSelectedGroups","selectHomeFeature","getHomeState","getSelectionGroups","d","getDataFilteredByGroups","some","selectedGroup","getDataFilteredByTextField","filterStr","subGroup","subgroup","elements","v","trim","toLowerCase","indexOf","sg","length","getDataForTable","tableArr","forEach","push","groupTitle","subgroupTitle"],"mappings":"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","file":"home-home-module-es5.js","sourcesContent":["import { Component } from '@angular/core';\r\n\r\nimport { Store } from '@ngrx/store';\r\nimport * as fromHomeActions from \"../../store/actions/home.action\";\r\n\r\n@Component({\r\n  selector: 'app-filter',\r\n  template: `\r\n    <mat-form-field class=\"w100\">\r\n      <mat-label>Фільтр по колонці Title</mat-label>\r\n      <input #filter matInput autocomplete=\"off\" (keyup)=\"applyFilter($event.target.value)\">\r\n      <button \r\n        *ngIf=\"filter.value !== ''\" \r\n        mat-icon-button \r\n        matSuffix\r\n        (click)=\"filter.value = ''; applyFilter('')\"\r\n       >\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n  `,\r\n  styles: [``]\r\n})\r\nexport class FilterComponent {\r\n\r\n  constructor(private store: Store<any>) { }\r\n\r\n  applyFilter(text) {\r\n    this.store.dispatch(fromHomeActions.setTextFilter({ text: text }));\r\n  }\r\n\r\n}\r\n","import { Component } from '@angular/core';\r\n\r\n// Store\r\nimport { Store } from '@ngrx/store';\r\nimport * as fromHome from \"../../store/reducers\";\r\nimport * as fromHomeActions from \"../../store/actions/home.action\";\r\n\r\n@Component({\r\n  selector: 'app-group-filter',\r\n  template: `\r\n    <mat-chip-list multiple [selectable]=\"true\">\r\n      <mat-chip \r\n        *ngFor=\"let group of selectedGroups$ | async\"\r\n        selectable=\"true\"\r\n        [selected]=\"group.selected\"\r\n        (click)=\"toggleGroup(group)\"\r\n      > {{ group.title}} </mat-chip>\r\n    </mat-chip-list>\r\n  `,\r\n  styles: [`\r\n    mat-chip {\r\n      cursor: pointer;\r\n    }\r\n  `]\r\n})\r\nexport class GroupFilterComponent {\r\n\r\n  selectedGroups$ = this.store.select(fromHome.getSelectionGroups); \r\n\r\n  constructor(private store: Store<any>) { }\r\n\r\n  toggleGroup(event) {\r\n    this.store.dispatch(fromHomeActions.toggleGroup({ group: event }));\r\n  }\r\n\r\n}\r\n","import { Component, Inject } from '@angular/core';\r\nimport { Clipboard } from \"@angular/cdk/clipboard\"\r\n\r\nimport { MatSnackBar, MAT_SNACK_BAR_DATA } from '@angular/material/snack-bar';\r\n\r\nimport { Store } from '@ngrx/store';\r\nimport * as fromHome from \"../../store/reducers\"\r\n\r\n@Component({\r\n  selector: 'app-list',\r\n  templateUrl: './list.component.html',\r\n  styleUrls: ['./list.component.scss']\r\n})\r\nexport class ListComponent {\r\n\r\n  tableData$ = this.store.select(fromHome.getDataForTable);\r\n  displayedColumns: string[] = ['id', 'title'];\r\n\r\n  constructor(\r\n    private store: Store<any>,\r\n    private clipboard: Clipboard,\r\n    private _snackBar: MatSnackBar\r\n  ) { }\r\n\r\n  isGroup(index, item): boolean{\r\n    return item.isGroup;\r\n  }\r\n\r\n  isSubgroup(index, item): boolean{\r\n    return item.isSubgroup;\r\n  } \r\n\r\n  copyContent(text){\r\n    this.clipboard.copy(text);\r\n    this.openSnackBar(text);\r\n  }\r\n\r\n  openSnackBar(message: string,) {\r\n    this._snackBar.openFromComponent(CopySnackBarComponent, {\r\n      duration: 1500,\r\n      data: {\r\n        message: message\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'snack-bar',\r\n  template: `\r\n    <div class=\"snack-bar-wr\">\r\n      <span class=\"snack-text\">{{ data.message }}</span>\r\n      <span class=\"snack-bar-btn\" (click)=\"onClick()\">Закрити</span>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    .snack-bar-wr {\r\n      display: flex;\r\n      flex-direction: row;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n    }\r\n\r\n    .snack-text {\r\n      color: white;\r\n    }\r\n        \r\n    .snack-bar-btn {\r\n      margin-left: 7px;\r\n      color: white;\r\n      cursor: pointer;\r\n    }\r\n  `],\r\n})\r\nexport class CopySnackBarComponent {\r\n\r\n  constructor(\r\n    private snackBar: MatSnackBar,\r\n    @Inject(MAT_SNACK_BAR_DATA) public data: any\r\n  ) { }\r\n\r\n  onClick() {\r\n    this.snackBar.dismiss();\r\n  }\r\n  \r\n}\r\n","<ng-container *ngIf=\"(tableData$ | async).length; else emptyList\">\r\n    <table mat-table [dataSource]=\"tableData$ | async\">\r\n\r\n        <ng-container matColumnDef=\"id\">\r\n            <th mat-header-cell *matHeaderCellDef> Code </th>\r\n            <td mat-cell *matCellDef=\"let element\" (click)=\"copyContent(element.id)\"> {{element.id}} </td>\r\n        </ng-container>\r\n    \r\n        <ng-container matColumnDef=\"title\">\r\n            <th mat-header-cell *matHeaderCellDef>Title</th>\r\n            <td mat-cell *matCellDef=\"let element\" (click)=\"copyContent(element.id)\"> {{element.title}} </td>\r\n        </ng-container>\r\n      \r\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns; sticky: true\"></tr>\r\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\r\n    \r\n        <!-- Group header -->\r\n        <ng-container matColumnDef=\"groupHeader\">\r\n            <td colspan=\"777\" mat-cell *matCellDef=\"let groupBy\" style=\"background: rgb(248, 248, 248);\" ><strong>{{ groupBy.groupTitle }}</strong></td>\r\n        </ng-container>\r\n    \r\n        <tr mat-row *matRowDef=\"let row; columns: ['groupHeader']; when: isGroup\"> </tr>\r\n    \r\n        <!-- SubGroup header -->\r\n        <ng-container matColumnDef=\"subGroup\">\r\n            <td colspan=\"999\" mat-cell *matCellDef=\"let subGroup\" style=\"background: rgb(251, 251, 251);\"><strong style=\"color: gray; margin-left: 7px;\">{{ subGroup.subgroupTitle }}</strong></td>\r\n        </ng-container>\r\n    \r\n        <tr mat-row *matRowDef=\"let row; columns: ['subGroup']; when: isSubgroup\"> </tr>\r\n    \r\n    </table>\r\n</ng-container>\r\n\r\n<ng-template #emptyList>\r\n    <div class=\"empty-list\">\r\n        <strong>Список пустий!</strong>\r\n    </div>\r\n</ng-template>\r\n\r\n\r\n","import { Component } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\n\r\nimport * as fromHome from \"../../store/reducers\";\r\nimport * as fromHomeActions from \"../../store/actions/home.action\";\r\n\r\n@Component({\r\n  selector: 'app-home-container',\r\n  templateUrl: './home-container.component.html',\r\n  styleUrls: ['./home-container.component.scss']\r\n})\r\nexport class HomeContainerComponent {\r\n\r\n  \r\n  data$ = this.store.select(fromHome.getData);\r\n  error$ = this.store.select(fromHome.getError);\r\n  \r\n  constructor(private store: Store<any>) {\r\n    this.store.dispatch(fromHomeActions.getData());\r\n  }\r\n\r\n}","<div class=\"container\" *ngIf=\"data$ | async; else error\">\r\n    <mat-card class=\"card\">\r\n        <div>\r\n            <mat-card-content>\r\n                <app-filter></app-filter>\r\n                <app-group-filter></app-group-filter>\r\n            </mat-card-content>\r\n        </div>\r\n        <div class=\"content\">\r\n            <app-list></app-list>\r\n        </div>\r\n    </mat-card>\r\n</div>\r\n\r\n<ng-template #error>\r\n    <div *ngIf=\"error$ | async as err\" class=\"error\">\r\n        <div><strong>Сталася помилка!</strong></div>\r\n        <div>{{err.message}}</div>\r\n        <div *ngIf=\"err?.error?.error?.message\">{{err.error.error.message}}</div>\r\n    </div>\r\n</ng-template>\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { HomeContainerComponent } from './container/home-container/home-container.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: \"\",\r\n    component: HomeContainerComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class HomeRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { HomeRoutingModule } from './home-routing.module';\r\n// Components\r\nimport { ListComponent } from './components/list/list.component';\r\nimport { HomeContainerComponent } from './container/home-container/home-container.component';\r\nimport { FilterComponent } from './components/filter/list.component';\r\nimport { GroupFilterComponent } from './components/group-filter/group-filter.component';\r\n\r\n// Store\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { HomeEffects } from './store/effects/home.effects';\r\n\r\nimport * as fromHome from \"./store/reducers/home.reducer\"\r\n\r\n// Modules\r\nimport { MaterialModule } from '../modules/material.module';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n\r\nconst COMPONENTS = [\r\n  HomeContainerComponent,\r\n  ListComponent,\r\n  FilterComponent,\r\n  GroupFilterComponent\r\n]\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ...COMPONENTS\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,               \r\n    HomeRoutingModule,\r\n    MaterialModule,\r\n    StoreModule.forFeature(fromHome.HOME_FEATURE_KEY, fromHome.reducer),\r\n    EffectsModule.forFeature([HomeEffects]),\r\n  ]\r\n})\r\nexport class HomeModule { }\r\n","import { createAction, props } from '@ngrx/store';\r\n\r\n// Model\r\nimport { Group } from '../../../models/store-data.model';\r\n\r\nexport const getData = createAction(\r\n    \"[Home Api] Get Data \"\r\n);\r\n\r\nexport const getDataSuccess = createAction(\r\n    \"[Home Api] Get Data Success\",\r\n    props<{ groups: Group[] }>()\r\n);\r\n\r\nexport const getDataFailure = createAction(\r\n    \"[Home Api] Get Data Failure\",\r\n    props<{ error: any }>()\r\n);\r\n\r\nexport const toggleGroup = createAction(\r\n    \"[Home] Toggle Group\",\r\n    props<{ group: any }>()\r\n);\r\n\r\nexport const setTextFilter = createAction(\r\n    \"[Home] Set Text Filter\",\r\n    props<{ text: string }>()\r\n);\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\nimport { of, Observable } from 'rxjs';\r\nimport { map, switchMap, catchError } from 'rxjs/operators';\r\n\r\nimport { Action } from '@ngrx/store';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport * as dataActions from \"../actions/home.action\";\r\n\r\nimport { DataService } from '../../../services/data.service';\r\n\r\nimport { StoreData } from 'src/app/models/store-data.model';\r\n \r\n@Injectable()\r\nexport class HomeEffects {\r\n \r\n  getData$: Observable<Action> = createEffect(() => this.actions$.pipe(\r\n    ofType(dataActions.getData),\r\n    switchMap(() => this.dataService.getDataFromFile()\r\n      .pipe(\r\n        map((storeData: StoreData) => {\r\n            return dataActions.getDataSuccess({ groups: storeData.group })\r\n        }),\r\n        catchError((error: HttpErrorResponse) => {\r\n            return of(dataActions.getDataFailure({ error: error }))\r\n        })\r\n      )\r\n    ))\r\n  );\r\n \r\n  constructor(\r\n    private actions$: Actions,\r\n    private dataService: DataService\r\n  ) {}\r\n}","import { Action, createReducer, on } from '@ngrx/store';\r\nimport * as homeAction from '../actions/home.action';\r\n\r\nimport { Group, SelectionGroup } from '../../../models/store-data.model';\r\n\r\nexport const HOME_FEATURE_KEY = \"home\";\r\n\r\nexport interface HomeState {\r\n    data: Group[],\r\n    groups: any[];\r\n    error: any;\r\n    filter: string;\r\n    selectedGroups: SelectionGroup[];\r\n}\r\n\r\nexport const initialState: HomeState = {\r\n    data: [],\r\n    groups: [],\r\n    error: null,\r\n    filter: '',\r\n    selectedGroups: []\r\n};\r\n\r\nconst dataReducer = createReducer(\r\n    initialState,\r\n    on(homeAction.getData, state => initialState),\r\n    on(homeAction.getDataSuccess, (state, { groups, type }) => ({\r\n        ...state,\r\n        data: groups,\r\n        groups: groups.map(g => ({ id: g.id, title: g.title })),\r\n        error: null,\r\n        selectedGroups: groups.map(group => ({ id: group.id, title: group.title, selected: true }))\r\n    })),\r\n    on(homeAction.getDataFailure, (state, { error }) => ({ ...state, data: undefined, error: error })),\r\n    on(homeAction.toggleGroup, (state, { group }) => {\r\n        const SG = JSON.parse(JSON.stringify(state.selectedGroups));\r\n        let el = SG[SG.findIndex(g => g.id === group.id)]       \r\n        el.selected = !el.selected;\r\n        return { ...state, selectedGroups: SG }\r\n    }),\r\n    on(homeAction.setTextFilter, (state, { text }) => ({ ...state, filter: text })),\r\n);\r\n  \r\nexport function reducer(state: HomeState, action: Action) {\r\n    return dataReducer(state, action);\r\n}\r\n\r\nexport const getData = (state) => state.data;\r\nexport const getGroups = (state) => state.groups;\r\nexport const getError = (state) => state.error;\r\nexport const getFilter = (state) => state.filter;\r\nexport const getSelectedGroups = (state) => state.selectedGroups;\r\n","import { createSelector } from \"@ngrx/store\";\r\n\r\nimport * as fromHome from \"./home.reducer\";\r\n\r\n// Models\r\nimport { Group } from '../../../models/store-data.model';\r\nimport { HOME_FEATURE_KEY } from './home.reducer';\r\n\r\nimport { State } from 'src/app/store/reducers';\r\n\r\nexport interface FeatureState {\r\n  [HOME_FEATURE_KEY]: fromHome.HomeState;\r\n}\r\n\r\nexport const selectHomeFeature = (state: State) => state[HOME_FEATURE_KEY];\r\n\r\nexport const getHomeState = createSelector(\r\n    selectHomeFeature,\r\n    (state: FeatureState) => state\r\n);\r\n\r\nexport const getError = createSelector(\r\n    getHomeState,\r\n    data => fromHome.getError(data)\r\n)\r\n\r\nexport const getData = createSelector(\r\n    getHomeState,\r\n    data => fromHome.getData(data)\r\n)\r\n\r\nexport const getGroups = createSelector(\r\n    getHomeState,\r\n    data => fromHome.getGroups(data)\r\n)\r\n\r\nexport const getFilter = createSelector(\r\n    getHomeState,\r\n    data => fromHome.getFilter(data)\r\n)\r\n\r\nexport const getSelectionGroups = createSelector(\r\n    getHomeState,\r\n    data => fromHome.getSelectedGroups(data)\r\n)\r\n\r\nexport const getSelectedGroups = createSelector(\r\n    getSelectionGroups,\r\n    data => data.filter(d => d.selected)\r\n)\r\n\r\nexport const getDataFilteredByGroups = createSelector(\r\n    getData,\r\n    getSelectedGroups,\r\n    (data, getSelectedGroups: any) => data ? data.filter((group: Group) => getSelectedGroups.some(selectedGroup => selectedGroup.id === group.id)) : data\r\n)\r\n\r\nexport const getDataFilteredByTextField = createSelector(\r\n    getDataFilteredByGroups,\r\n    getFilter,\r\n    (data, filterStr: string) => {\r\n        if (filterStr && data) {\r\n            return JSON.parse(JSON.stringify(data)).map(group => {\r\n                group.subGroup = group.subGroup.map(subgroup => ({\r\n                    ...subgroup,\r\n                    elements: subgroup.elements.filter(v => v.title.trim().toLowerCase().indexOf(filterStr) !== -1)\r\n                })).filter(sg => sg.elements.length)\r\n                return group\r\n            }).filter(g => g.subGroup.length)\r\n        }\r\n        return data;\r\n    }\r\n)\r\n\r\nexport const getDataForTable = createSelector(\r\n    getDataFilteredByTextField,\r\n    (data): Group[] => {\r\n        if (data) {\r\n            const tableArr = [];\r\n            \r\n            data.forEach(group => {\r\n                tableArr.push({\r\n                    groupTitle: group.title,\r\n                    isGroup: true\r\n                })\r\n                \r\n                group.subGroup.forEach(subgroup => {\r\n                    tableArr.push({\r\n                        subgroupTitle: subgroup.title,\r\n                        isSubgroup: true\r\n                    })\r\n\r\n                    subgroup.elements.forEach(el => {\r\n                        tableArr.push(el)\r\n                    })\r\n                })\r\n            })\r\n        \r\n            return tableArr;\r\n        }\r\n\r\n        return [];\r\n    }\r\n)\r\n\r\n"]}