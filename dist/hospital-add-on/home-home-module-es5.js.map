{"version":3,"sources":["webpack:///src/app/home/components/filter/list.component.ts","webpack:///src/app/home/components/group-filter/group-filter.component.ts","webpack:///src/app/home/components/list/list.component.ts","webpack:///src/app/home/components/list/list.component.html","webpack:///src/app/home/container/home-container/home-container.component.ts","webpack:///src/app/home/container/home-container/home-container.component.html","webpack:///src/app/home/home-routing.module.ts","webpack:///src/app/home/home.module.ts","webpack:///src/app/home/store/actions/home.action.ts","webpack:///src/app/home/store/effects/home.effects.ts","webpack:///src/app/home/store/reducers/home.reducer.ts","webpack:///src/app/home/store/reducers/index.ts"],"names":["FilterComponent","store","text","dispatch","applyFilter","selector","template","styles","GroupFilterComponent","selectedGroups$","select","event","group","ListComponent","clipboard","_snackBar","tableData$","displayedColumns","index","item","isGroup","isSubgroup","copy","openSnackBar","message","openFromComponent","CopySnackBarComponent","duration","data","templateUrl","styleUrls","snackBar","dismiss","onClick","HomeContainerComponent","data$","error$","routes","path","component","HomeRoutingModule","forChild","imports","exports","COMPONENTS","HomeModule","forFeature","declarations","getData","getDataSuccess","getDataFailure","toggleGroup","setTextFilter","HomeEffects","actions$","dataService","getData$","pipe","getDataFromFile","storeData","groups","error","HOME_FEATURE_KEY","initialState","filter","selectedGroups","dataReducer","state","type","map","g","id","title","selected","undefined","SG","JSON","parse","stringify","el","findIndex","reducer","action","getGroups","getError","getFilter","getSelectedGroups","selectHomeFeature","getHomeState","getSelectionGroups","d","getDataFilteredByGroups","some","selectedGroup","getDataFilteredByTextField","filterStr","subGroup","subgroup","elements","v","trim","toLowerCase","indexOf","sg","length","getDataForTable","tableArr","forEach","push","groupTitle","subgroupTitle"],"mappings":"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","file":"home-home-module-es5.js","sourcesContent":["import { Component } from '@angular/core';\n\nimport { Store } from '@ngrx/store';\nimport * as fromHomeActions from \"../../store/actions/home.action\";\n\n@Component({\n  selector: 'app-filter',\n  template: `\n    <mat-form-field class=\"w100\">\n      <mat-label>Фільтр по колонці Title</mat-label>\n      <input #filter matInput autocomplete=\"off\" (keyup)=\"applyFilter($event.target.value)\">\n      <button \n        *ngIf=\"filter.value !== ''\" \n        mat-icon-button \n        matSuffix\n        (click)=\"filter.value = ''; applyFilter('')\"\n       >\n        <mat-icon>close</mat-icon>\n      </button>\n    </mat-form-field>\n  `,\n  styles: [``]\n})\nexport class FilterComponent {\n\n  constructor(private store: Store<any>) { }\n\n  applyFilter(text) {\n    this.store.dispatch(fromHomeActions.setTextFilter({ text: text }));\n  }\n\n}\n","import { Component } from '@angular/core';\n\n// Store\nimport { Store } from '@ngrx/store';\nimport * as fromHome from \"../../store/reducers\";\nimport * as fromHomeActions from \"../../store/actions/home.action\";\n\n@Component({\n  selector: 'app-group-filter',\n  template: `\n    <mat-chip-list multiple [selectable]=\"true\">\n      <mat-chip \n        *ngFor=\"let group of selectedGroups$ | async\"\n        selectable=\"true\"\n        [selected]=\"group.selected\"\n        (click)=\"toggleGroup(group)\"\n      > {{ group.title}} </mat-chip>\n    </mat-chip-list>\n  `,\n  styles: [`\n    mat-chip {\n      cursor: pointer;\n    }\n  `]\n})\nexport class GroupFilterComponent {\n\n  selectedGroups$ = this.store.select(fromHome.getSelectionGroups); \n\n  constructor(private store: Store<any>) { }\n\n  toggleGroup(event) {\n    this.store.dispatch(fromHomeActions.toggleGroup({ group: event }));\n  }\n\n}\n","import { Component, Inject } from '@angular/core';\nimport { Clipboard } from \"@angular/cdk/clipboard\"\n\nimport { MatSnackBar, MAT_SNACK_BAR_DATA } from '@angular/material/snack-bar';\n\nimport { Store } from '@ngrx/store';\nimport * as fromHome from \"../../store/reducers\"\n\n@Component({\n  selector: 'app-list',\n  templateUrl: './list.component.html',\n  styleUrls: ['./list.component.scss']\n})\nexport class ListComponent {\n\n  tableData$ = this.store.select(fromHome.getDataForTable);\n  displayedColumns: string[] = ['id', 'title'];\n\n  constructor(\n    private store: Store<any>,\n    private clipboard: Clipboard,\n    private _snackBar: MatSnackBar\n  ) { }\n\n  isGroup(index, item): boolean{\n    return item.isGroup;\n  }\n\n  isSubgroup(index, item): boolean{\n    return item.isSubgroup;\n  } \n\n  copyContent(text){\n    this.clipboard.copy(text);\n    this.openSnackBar(text);\n  }\n\n  openSnackBar(message: string,) {\n    this._snackBar.openFromComponent(CopySnackBarComponent, {\n      duration: 1500,\n      data: {\n        message: message\n      }\n    });\n  }\n\n}\n\n@Component({\n  selector: 'snack-bar',\n  template: `\n    <div class=\"snack-bar-wr\">\n      <span class=\"snack-text\">{{ data.message }}</span>\n      <span class=\"snack-bar-btn\" (click)=\"onClick()\">Закрити</span>\n    </div>\n  `,\n  styles: [`\n    .snack-bar-wr {\n      display: flex;\n      flex-direction: row;\n      justify-content: space-between;\n      align-items: center;\n    }\n\n    .snack-text {\n      color: white;\n    }\n        \n    .snack-bar-btn {\n      margin-left: 7px;\n      color: white;\n      cursor: pointer;\n    }\n  `],\n})\nexport class CopySnackBarComponent {\n\n  constructor(\n    private snackBar: MatSnackBar,\n    @Inject(MAT_SNACK_BAR_DATA) public data: any\n  ) { }\n\n  onClick() {\n    this.snackBar.dismiss();\n  }\n  \n}\n","<ng-container *ngIf=\"(tableData$ | async).length; else emptyList\">\n    <table mat-table [dataSource]=\"tableData$ | async\">\n\n        <ng-container matColumnDef=\"id\">\n            <th mat-header-cell *matHeaderCellDef> Code </th>\n            <td mat-cell *matCellDef=\"let element\" (click)=\"copyContent(element.id)\"> {{element.id}} </td>\n        </ng-container>\n    \n        <ng-container matColumnDef=\"title\">\n            <th mat-header-cell *matHeaderCellDef>Title</th>\n            <td mat-cell *matCellDef=\"let element\" (click)=\"copyContent(element.id)\"> {{element.title}} </td>\n        </ng-container>\n      \n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns; sticky: true\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n    \n        <!-- Group header -->\n        <ng-container matColumnDef=\"groupHeader\">\n            <td colspan=\"777\" mat-cell *matCellDef=\"let groupBy\" style=\"background: rgb(248, 248, 248);\" ><strong>{{ groupBy.groupTitle }}</strong></td>\n        </ng-container>\n    \n        <tr mat-row *matRowDef=\"let row; columns: ['groupHeader']; when: isGroup\"> </tr>\n    \n        <!-- SubGroup header -->\n        <ng-container matColumnDef=\"subGroup\">\n            <td colspan=\"999\" mat-cell *matCellDef=\"let subGroup\" style=\"background: rgb(251, 251, 251);\"><strong style=\"color: gray; margin-left: 7px;\">{{ subGroup.subgroupTitle }}</strong></td>\n        </ng-container>\n    \n        <tr mat-row *matRowDef=\"let row; columns: ['subGroup']; when: isSubgroup\"> </tr>\n    \n    </table>\n</ng-container>\n\n<ng-template #emptyList>\n    <div class=\"empty-list\">\n        <strong>Список пустий!</strong>\n    </div>\n</ng-template>\n\n\n","import { Component } from '@angular/core';\nimport { Store } from '@ngrx/store';\n\nimport * as fromHome from \"../../store/reducers\";\nimport * as fromHomeActions from \"../../store/actions/home.action\";\n\n@Component({\n  selector: 'app-home-container',\n  templateUrl: './home-container.component.html',\n  styleUrls: ['./home-container.component.scss']\n})\nexport class HomeContainerComponent {\n\n  \n  data$ = this.store.select(fromHome.getData);\n  error$ = this.store.select(fromHome.getError);\n  \n  constructor(private store: Store<any>) {\n    this.store.dispatch(fromHomeActions.getData());\n  }\n\n}","<div class=\"container\" *ngIf=\"data$ | async; else error\">\n    <mat-card class=\"card\">\n        <div>\n            <mat-card-content>\n                <app-filter></app-filter>\n                <app-group-filter></app-group-filter>\n            </mat-card-content>\n        </div>\n        <div class=\"content\">\n            <app-list></app-list>\n        </div>\n    </mat-card>\n</div>\n\n<ng-template #error>\n    <div *ngIf=\"error$ | async as err\" class=\"error\">\n        <div><strong>Сталася помилка!</strong></div>\n        <div>{{err.message}}</div>\n        <div *ngIf=\"err?.error?.error?.message\">{{err.error.error.message}}</div>\n    </div>\n</ng-template>\n\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { HomeContainerComponent } from './container/home-container/home-container.component';\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: HomeContainerComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class HomeRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HomeRoutingModule } from './home-routing.module';\n// Components\nimport { ListComponent } from './components/list/list.component';\nimport { HomeContainerComponent } from './container/home-container/home-container.component';\nimport { FilterComponent } from './components/filter/list.component';\nimport { GroupFilterComponent } from './components/group-filter/group-filter.component';\n\n// Store\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\nimport { HomeEffects } from './store/effects/home.effects';\n\nimport * as fromHome from \"./store/reducers/home.reducer\"\n\n// Modules\nimport { MaterialModule } from '../modules/material.module';\nimport { FormsModule } from '@angular/forms';\n\n\nconst COMPONENTS = [\n  HomeContainerComponent,\n  ListComponent,\n  FilterComponent,\n  GroupFilterComponent\n]\n\n\n@NgModule({\n  declarations: [\n    ...COMPONENTS\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,               \n    HomeRoutingModule,\n    MaterialModule,\n    StoreModule.forFeature(fromHome.HOME_FEATURE_KEY, fromHome.reducer),\n    EffectsModule.forFeature([HomeEffects]),\n  ]\n})\nexport class HomeModule { }\n","import { createAction, props } from '@ngrx/store';\n\n// Model\nimport { Group } from '../../../models/store-data.model';\n\nexport const getData = createAction(\n    \"[Home Api] Get Data \"\n);\n\nexport const getDataSuccess = createAction(\n    \"[Home Api] Get Data Success\",\n    props<{ groups: Group[] }>()\n);\n\nexport const getDataFailure = createAction(\n    \"[Home Api] Get Data Failure\",\n    props<{ error: any }>()\n);\n\nexport const toggleGroup = createAction(\n    \"[Home] Toggle Group\",\n    props<{ group: any }>()\n);\n\nexport const setTextFilter = createAction(\n    \"[Home] Set Text Filter\",\n    props<{ text: string }>()\n);\n\n","import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { of, Observable } from 'rxjs';\nimport { map, switchMap, catchError } from 'rxjs/operators';\n\nimport { Action } from '@ngrx/store';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport * as dataActions from \"../actions/home.action\";\n\nimport { DataService } from '../../../services/data.service';\n\nimport { StoreData } from 'src/app/models/store-data.model';\n \n@Injectable()\nexport class HomeEffects {\n \n  getData$: Observable<Action> = createEffect(() => this.actions$.pipe(\n    ofType(dataActions.getData),\n    switchMap(() => this.dataService.getDataFromFile()\n      .pipe(\n        map((storeData: StoreData) => {\n            return dataActions.getDataSuccess({ groups: storeData.group })\n        }),\n        catchError((error: HttpErrorResponse) => {\n            return of(dataActions.getDataFailure({ error: error }))\n        })\n      )\n    ))\n  );\n \n  constructor(\n    private actions$: Actions,\n    private dataService: DataService\n  ) {}\n}","import { Action, createReducer, on } from '@ngrx/store';\nimport * as homeAction from '../actions/home.action';\n\nimport { Group, SelectionGroup } from '../../../models/store-data.model';\n\nexport const HOME_FEATURE_KEY = \"home\";\n\nexport interface HomeState {\n    data: Group[],\n    groups: any[];\n    error: any;\n    filter: string;\n    selectedGroups: SelectionGroup[];\n}\n\nexport const initialState: HomeState = {\n    data: [],\n    groups: [],\n    error: null,\n    filter: '',\n    selectedGroups: []\n};\n\nconst dataReducer = createReducer(\n    initialState,\n    on(homeAction.getData, state => initialState),\n    on(homeAction.getDataSuccess, (state, { groups, type }) => ({\n        ...state,\n        data: groups,\n        groups: groups.map(g => ({ id: g.id, title: g.title })),\n        error: null,\n        selectedGroups: groups.map(group => ({ id: group.id, title: group.title, selected: true }))\n    })),\n    on(homeAction.getDataFailure, (state, { error }) => ({ ...state, data: undefined, error: error })),\n    on(homeAction.toggleGroup, (state, { group }) => {\n        const SG = JSON.parse(JSON.stringify(state.selectedGroups));\n        let el = SG[SG.findIndex(g => g.id === group.id)]       \n        el.selected = !el.selected;\n        return { ...state, selectedGroups: SG }\n    }),\n    on(homeAction.setTextFilter, (state, { text }) => ({ ...state, filter: text })),\n);\n  \nexport function reducer(state: HomeState, action: Action) {\n    return dataReducer(state, action);\n}\n\nexport const getData = (state) => state.data;\nexport const getGroups = (state) => state.groups;\nexport const getError = (state) => state.error;\nexport const getFilter = (state) => state.filter;\nexport const getSelectedGroups = (state) => state.selectedGroups;\n","import { createSelector } from \"@ngrx/store\";\n\nimport * as fromHome from \"./home.reducer\";\n\n// Models\nimport { Group } from '../../../models/store-data.model';\nimport { HOME_FEATURE_KEY } from './home.reducer';\n\nimport { State } from 'src/app/store/reducers';\n\nexport interface FeatureState {\n  [HOME_FEATURE_KEY]: fromHome.HomeState;\n}\n\nexport const selectHomeFeature = (state: State) => state[HOME_FEATURE_KEY];\n\nexport const getHomeState = createSelector(\n    selectHomeFeature,\n    (state: FeatureState) => state\n);\n\nexport const getError = createSelector(\n    getHomeState,\n    data => fromHome.getError(data)\n)\n\nexport const getData = createSelector(\n    getHomeState,\n    data => fromHome.getData(data)\n)\n\nexport const getGroups = createSelector(\n    getHomeState,\n    data => fromHome.getGroups(data)\n)\n\nexport const getFilter = createSelector(\n    getHomeState,\n    data => fromHome.getFilter(data)\n)\n\nexport const getSelectionGroups = createSelector(\n    getHomeState,\n    data => fromHome.getSelectedGroups(data)\n)\n\nexport const getSelectedGroups = createSelector(\n    getSelectionGroups,\n    data => data.filter(d => d.selected)\n)\n\nexport const getDataFilteredByGroups = createSelector(\n    getData,\n    getSelectedGroups,\n    (data, getSelectedGroups: any) => data ? data.filter((group: Group) => getSelectedGroups.some(selectedGroup => selectedGroup.id === group.id)) : data\n)\n\nexport const getDataFilteredByTextField = createSelector(\n    getDataFilteredByGroups,\n    getFilter,\n    (data, filterStr: string) => {\n        if (filterStr && data) {\n            return JSON.parse(JSON.stringify(data)).map(group => {\n                group.subGroup = group.subGroup.map(subgroup => ({\n                    ...subgroup,\n                    elements: subgroup.elements.filter(v => v.title.trim().toLowerCase().indexOf(filterStr) !== -1)\n                })).filter(sg => sg.elements.length)\n                return group\n            }).filter(g => g.subGroup.length)\n        }\n        return data;\n    }\n)\n\nexport const getDataForTable = createSelector(\n    getDataFilteredByTextField,\n    (data): Group[] => {\n        if (data) {\n            const tableArr = [];\n            \n            data.forEach(group => {\n                tableArr.push({\n                    groupTitle: group.title,\n                    isGroup: true\n                })\n                \n                group.subGroup.forEach(subgroup => {\n                    tableArr.push({\n                        subgroupTitle: subgroup.title,\n                        isSubgroup: true\n                    })\n\n                    subgroup.elements.forEach(el => {\n                        tableArr.push(el)\n                    })\n                })\n            })\n        \n            return tableArr;\n        }\n\n        return [];\n    }\n)\n\n"]}